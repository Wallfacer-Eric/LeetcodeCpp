#include <functional>   // std::bit_xor
#include <algorithm>    // std::accumulate
class Solution {
public:
   vector<int> singleNumber(vector<int>& nums) {
               
        int xr=nums[0];
        for(int i=1;i<nums.size();i++)
            xr=xr^nums[i];
        
        int pos=xr&~(xr-1);  //Generate a number with the rightmost set bit of the xor
        
        int x=0,y=0;
        for(int i=0;i<nums.size();i++)
            if((pos)&nums[i])
                x=x^nums[i];
            else
                y=y^nums[i];
        
        vector <int> res;
        res.push_back(x);
        res.push_back(y);
        return res;
    }
};

comment:
1. xor all, get the xor of two unique
2. find a 1 in result, according to this digit, divide whole num to two groups
3. xor each group, two results are answer