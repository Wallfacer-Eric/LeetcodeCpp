class Solution {
public:
    vector<int> diffWaysToCompute(string input) {
        vector<int> ans;
        if (input.size()==0) return ans;
        for (int i=0 ;i<input.size();i++){
            char cur = input[i];
            if (cur=='+' || cur=='*' || cur=='-'){
                vector<int> result1 = diffWaysToCompute(input.substr(0,i));
                vector<int> result2 = diffWaysToCompute(input.substr(i+1,input.size()));
                for (auto j:result1){
                    for (auto k:result2){
                        ans.push_back(solve(j,cur,k));
                    }
                }
            }
        }
        if (ans.empty()){
            ans.push_back(atoi(input.c_str()));
        }
        return ans;
    }
    int solve(int x, char a, int y){
        if (a=='+') return x+y;
        if (a=='-') return x-y;
        if (a=='*') return x*y;
        if (a=='/') return x/y;
        return 0;
    }
};

comment:
recursive, each time double the result, with the new two cases