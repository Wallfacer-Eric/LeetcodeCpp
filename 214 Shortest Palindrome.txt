class Solution {
public:
    string shortestPalindrome(string s) {
        int n = s.size();
        string rev;
        rev = s;
        reverse(rev.begin(),rev.end());
        for (int i=0;i<n;i++){
            if (s.substr(0,n-i)==rev.substr(i))
                return rev.substr(0,i)+s;
        }
        return "";
    }
};

comment:
1. store a reverse array, and use string compare to check until the biggest palindrome is found

2. use two pointers and recursion, each compare tail--, if head=tail, head++, return remain_rev+shortestP(s.sub(0,i))+s.sub(i))

3. KMP use a next[] function to store the next step of j if s[i]!=s[j], i remain 
next[]can be produced by:
f(0)=0
for i in 1:n
    t=f(i-1)
    while (t>0 and s[i]!=s[t])
	 t=f(t-1)
    if s[i]==s[t] t++
    f(i)=t