class Solution {
public:
    bool canFinish(int numCourses, vector<pair<int, int>>& prerequisites) {
        
        for (auto p : prerequisites) {
            graph[p.second].push_back(p.first);
        }
        vector<int> records(numCourses, 0);
        for (int i=0; i<numCourses; i++) {
            vector<bool> visited(numCourses, false);
            if (detectCycle(i, visited, records)) {
                return false;
            }
        }
        return true;
    }
private:
    unordered_map<int, vector<int>> graph;
    bool detectCycle(int course, vector<bool>& visited, vector<int>& records) {
        if (records[course] == 1) return true;
        if (records[course] == -1) return false;
        if (visited[course]) return true;
        
        visited[course] = true;
        for (auto n : graph[course]) {
            if (detectCycle(n, visited, records)) {
                records[course] = 1;
                return true;
            }
        }
        visited[course] = false;
        records[course] = -1;
        return false;
    }
};

comment:
1. use map to store graph
2. use dfs to check each node has a loop, use two array to store the status of visited and examined