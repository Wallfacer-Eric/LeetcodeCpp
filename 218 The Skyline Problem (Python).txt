class Solution(object):
    def getSkyline(self, buildings):
        """
        :type buildings: List[List[int]]
        :rtype: List[List[int]]
        """
        left=[];
        for i in buildings:
            left.append([i[0],0,i[2]])
        right=[]
        buildings.sort(key=lambda buildings:buildings[1])
        for i in buildings:
            right.append([i[1],1,i[2]])
        mix = left+right
        mix.sort(key=lambda mix:mix[0])
        sky=dict()
        cur=[0]
        hei=0
        for i in mix:
            if i[1]==0:               # building start
                cur.append(i[2])      # update height vector
                if i[2]>hei:          # check if skyline change
                    hei=i[2]
                    if sky.has_key(i[0]):
                        sky[i[0]] = max(sky[i[0]],hei)
                    else:
                        sky[i[0]]=hei
            elif i[1]==1:             # building end
                cur.remove(i[2])      # update height vector
                if max(cur)!=hei:
                    hei = max(cur)
                    if sky.has_key(i[0]):
                        sky[i[0]] = min(sky[i[0]],hei)
                    else:
                        sky[i[0]]=hei
        keys = sky.keys()
        keys.sort()
        return [[key,sky[key]] for key in keys]


comment:
build an array to store all left/right point in order and labeled with their l/r bool and height
update the height array and current height value, update the skyline when height value change
skyline is a dictionary to avoid duplicate, finally sort and return

it should be better if use max heap to replace the height array