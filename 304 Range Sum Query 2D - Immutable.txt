class NumMatrix {
public:
    vector<vector<int>> v;
    NumMatrix(vector<vector<int>> matrix) {        
        int m = matrix.size();
        if (m==0) return;
        int n = matrix[0].size();
        if (n==0) return;
        v.resize(m+1); // row
        for (int i = 0; i < m+1; ++i){
            v[i].resize(n+1); // column
        }
        for (int i=0;i<m+1;i++) v[i][0]=0;
        for (int j=0;j<n+1;j++) v[0][j]=0;
        for (int i=1;i<m+1;i++){
            for (int j=1;j<n+1;j++){
                v[i][j] = v[i-1][j]+v[i][j-1]-v[i-1][j-1]+matrix[i-1][j-1];
            }
        }

    }
    
    int sumRegion(int row1, int col1, int row2, int col2) {
        return this->v[row2+1][col2+1]-this->v[row2+1][col1]-this->v[row1][col2+1]+this->v[row1][col1];
    }
};

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix obj = new NumMatrix(matrix);
 * int param_1 = obj.sumRegion(row1,col1,row2,col2);
 */

comment:
lowright-lowleft-upright+upleft = the sum of square, in sum graph