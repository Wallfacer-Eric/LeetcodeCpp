class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        if (matrix.size()==0 || matrix[0].size()==0) return false;
        return search(matrix,target,0,matrix.size()-1,0,matrix[0].size()-1);
    }
    
    bool search(vector<vector<int>>& matrix, int target, int m1, int m2, int n1, int n2){
        if (m1>m2 || n1>n2) return false;
        if (m1+1>=m2 && n1+1>=n2){
            if (matrix[m1][n1]==target) return true;
            if (matrix[m1][n2]==target) return true;
            if (matrix[m2][n1]==target) return true;
            if (matrix[m2][n2]==target) return true;
            return false;
        }
        int mid = matrix[(m1+m2)/2][(n1+n2)/2];
        //cout<<mid<<' '<<m1<<' '<<m2<<' '<<n1<<' '<<n2<<' '<<endl;
        if (target==mid) return true;    
        bool r1 = search(matrix,target,(m1+m2)/2,m2,n1,(n1+n2)/2);
        bool r2 = search(matrix,target,m1,(m1+m2)/2,(n1+n2)/2,n2);
        if (target>mid) return r1||r2||search(matrix,target,(m1+m2)/2,m2,(n1+n2)/2,n2);
        return r1||r2||search(matrix,target,m1,(m1+m2)/2,n1,(n1+n2)/2);
    }
};

comment:
compare to middle, divide to four parts, drop one part, recursively scan another three