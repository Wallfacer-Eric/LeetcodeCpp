class Solution {
public:
    void gameOfLife(vector<vector<int>>& board) {
        int m=board.size();
        if (m!=0){ 
        int n=board[0].size();
        for (int i=0;i!=board.size();i++){
            for(int j=0;j!=board[0].size();j++){
                if (board[i][j]==0){
                    if (count(board,i,j,m,n,1,2)==3) board[i][j]=-1;
                }
                else{
                    if (count(board,i,j,m,n,1,2)<2) board[i][j]=2;
                    if (count(board,i,j,m,n,1,2)>3) board[i][j]=2;
                }
            }
        }
        for (int i=0;i!=board.size();i++){
            for(int j=0;j!=board[0].size();j++){
                if (board[i][j]==2) board[i][j]=0;
                if (board[i][j]==-1) board[i][j]=1;
            }
        }
        }
    }
    int count(vector<vector<int>>& board,int i,int j,int m,int n,int t1,int t2){
        int c=0;
        for (int ii=i-1;ii<=i+1;ii++){
            for (int jj=j-1;jj<=j+1;jj++){
                if (ii<0 || ii>m-1 || jj<0 || jj>n-1) continue;
                if (ii==i && jj==j) continue;
                if (board[ii][jj]==t1 || board[ii][jj]==t2)c++;
            }
        }
        //cout<<i<<' '<<j<<' '<<c<<endl;
        return c;
    }
};


comment:
define dying and lifing state, dying means it will die but now it is alive, lifing means it will alive but now it is dead