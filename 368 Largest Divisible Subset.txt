class Solution:
    def largestDivisibleSubset(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        ans = []
        if len(nums)==0: return ans
        nums.sort()
        t = nums[0]
        ans.append(t)
        new_nums=[]
        for k in nums[1:]:
            if k%t==0:
                new_nums.append(k)
        ans1 =  ans+self.largestDivisibleSubset(new_nums)
        if len(new_nums)+1>len(nums)/2:
            return ans1
        ans2 =  self.largestDivisibleSubset(nums[1:])
        if len(ans1)>len(ans2): return ans1
        return ans2

comment:
recursive:
1. include current num, check in new nums with multiplyers of current
if 1 return a longer than half of nums, return directly
2. check nums[1:]
compare 1 and 2, return the longer 